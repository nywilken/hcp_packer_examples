/* Creates a new managed image referencing a source image from a HCP Packer registry.*/

variable "client_id" {
  default = env("ARM_CLIENT_ID")
}
variable "client_secret" {
  default = env("ARM_CLIENT_SECRET")
}
variable "resource_group" {
  default = env("ARM_RESOURCE_GROUP_NAME")
}
variable "subscription_id" {
  default = env("ARM_SUBSCRIPTION_ID")
}

# Retrieves information about the HCP Packer "iteration"; an "iteration" can be
# thought of as all the metadata created by a single call of `packer build`.
data "hcp-packer-iteration" "hardened-source" {
  bucket_name = "windows-server"
  channel     = "development"
}

# Retrieves information about the HCP Packer "image"; an image can be thought
# of as all the metadata (including the artifact names) created by a single
# "source" builder; this can include multiple images so we provide a cloud
# region to disambiguate.
data "hcp-packer-image" "foo" {
  bucket_name    = "windows-server"
  iteration_id   = data.hcp-packer-iteration.hardened-source.id
  cloud_provider = "azure"
  region         = "westus"
}


locals {
  source_image                = data.hcp-packer-image.foo.labels["managed_image_name"]
  source_image_resource_group = data.hcp-packer-image.foo.labels["managed_image_resourcegroup_name"]
}

# This source uses the output from a previous Packer build. By using the
# HCP Packer registry in this way, you can easily create build pipelines where
# a single base image can be customized in multiple secondary layers.
source "azure-arm" "autogenerated_1" {
  azure_tags = {
    dept = "Engineering"
    task = "Image deployment"
  }
  custom_managed_image_name                = local.source_image
  custom_managed_image_resource_group_name = local.source_image_resource_group
  location                                 = "West US"
  managed_image_name                       = "HCPPacker-windows-server"
  managed_image_resource_group_name        = var.resource_group
  subscription_id                          = var.subscription_id
  os_type                                  = "windows"
  communicator                             = "winrm"
  winrm_insecure                           = "true"
  winrm_timeout                            = "8m"
  winrm_use_ntlm                           = "true"
  winrm_use_ssl                            = "true"
  winrm_username                           = "packer"
  vm_size                                  = "Standard_DS1_v2"
}

build {
  sources = ["source.azure-arm.autogenerated_1"]
}
